//doubly linked list implementation in cpp
#include<iostream>
using namespace std;
class node{
    public:
    int data;
    node *next;
};
node *head=NULL,*tail=NULL;
void insert_at_begin(int data){
    node * newnode=new node();
    newnode->data=data;
    newnode->next=NULL;
    if(head==NULL){
        head=newnode;
    }
    else{
        newnode->next=head;
        head=newnode;
        }
}
void insert_at_end(int data){
    node * newnode=new node();
    node * temp;
    newnode->data=data;
    newnode->next=NULL;
    if(head==NULL){
        head=newnode;
    }
    else{
        temp=head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=newnode;
        newnode->next=NULL;
        }
}
void insert_at_position(int data,int pos){
    node * newnode=new node();
    node * temp;
    newnode->data=data;
    newnode->next=NULL;
    temp=head;
    for(int i=0;i<pos-1;i++){
        temp=temp->next;
    }
    newnode->next=temp->next;
    temp->next=newnode;
}
void deletion_at_begin(){
    node * temp;
    if(head==NULL){
        cout<<"deletion is not possible";
    }
    else{
        temp=head;
        head=temp->next;
        free(temp);
        }
}
void deletion_at_end(){
    node * temp,*prev;
    if(head==NULL){
        cout<<"deletion is not possible";
    }
    else{
        temp=head;
        while(temp->next!=NULL){
            prev=temp;
            temp=temp->next;
        }
        prev->next=NULL;
        free(temp);
        }
}
void deletion_at_position(int pos){
    node * temp,*prev;
    if(head==NULL){
        cout<<"deletion is not possible";
    }
    else{
        temp=head;
        for(int i=0;i<pos;i++){
            prev=temp;
            temp=temp->next;  
        }
        prev->next=temp->next;
        free(temp);
        }
}
void search(int key){
    node *temp;
    if(head==NULL){
        cout<<"empty list";
    }
    else{
        temp=head;
        int c=0,f=0;
        while(temp!=NULL){
            if(temp->data==key){
                f=1;
                break;
            }
            c=c+1;
            temp=temp->next;
        }
        if(f==1)
            cout<<key<<"found at"<<c<<"\n";
        else
            cout<<key<<"not found\n";
    }
}
void display(){
    node *temp;
    temp=head;
    cout<<"elements in the list:\n";
    while(temp!=NULL){
        std::cout << temp->data << std::endl;
        temp=temp->next;
    }
}
int main(){
    int n,data,option,pos;
    do{
        cout<<"1.insert_at_begin\t2.insert_at_end\t3.insert_at_position\t4.deletion_at_begin\t5.deletion_at_end\t6.deletion_at_position\t7.search\t8.display\t9.exit";
        cout<<"enter your choice:";
        cin>>option;
        switch(option){
            case 1:
                cout<<"enter data:";
                cin>>data;
                insert_at_begin(data);
                break;
            case 2:
                cout<<"enter data:";
                cin>>data;
                insert_at_end(data);
                break;
            case 3:
                cout<<"enter data and position:";
                cin>>data>>pos;
                insert_at_position(data,pos);
                break;
            case 4:
                deletion_at_begin();
                break;
            case 5:
                deletion_at_end();
                break;
            case 6:
                cout<<"enter position:";
                cin>>pos;
                deletion_at_position(pos);
                break;
            case 7:
                cout<<"enter key:";
                cin>>data;
                search(data);
                break;
            case 8:
                display();
                break;
            case 9:
                exit(0);
            default:
                cout<<"enter valid choice";
        }
    }while(option!=0);
}
